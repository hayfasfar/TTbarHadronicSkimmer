
2024-12-02

------args------
dataset = ['TTbar']
iov = 2016APV
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']

2024-12-03

------args------
dataset = ['TTbar']
iov = 2016
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']

2024-12-07

------args------
dataset = ['RSGluon']
iov = 2017
signals = False
era = []
pt = []
mass = ['2000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
177a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
194a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
226a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
227a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
229a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
231a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
244a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
246a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
248a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
251a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
254a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
569,570c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
582a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
620a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
621a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
622a759,766
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
623a768,788
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
> 
>          
>             
>             
>         '''
634a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
644a836
>         if self.useDeepAK8:
647,649c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
651,652c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
657c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
662,663c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
667,671c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
674c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
676,679c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
682,686c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
690a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
777a1004,1005
>                          
>         
778a1007,1017
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
779a1019,1024
> 
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
806a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
827a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
956a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
992a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
1017a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
1030a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
1032a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
1040a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
1064c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1083a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1096a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1115a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2024-12-07

------args------
dataset = ['RSGluon']
iov = 2017
signals = False
era = []
pt = []
mass = ['2000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
177a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
194a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
226a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
227a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
229a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
231a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
244a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
246a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
248a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
251a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
254a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
569,570c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
582a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
620a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
621a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
622a759,766
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
623a768,788
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
> 
>          
>             
>             
>         '''
634a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
644a836
>         if self.useDeepAK8:
647,649c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
651,652c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
657c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
662,663c854,857
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
> 
664a859,863
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
667,671c866
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             del FatJet_pt_argsort, SortedFatJets
672a868,878
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
> 
>             
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
674d879
<         del FatJet_pt_argsort, SortedFatJets
676,679c881
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             
682,686c884,890
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
687a892,895
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
688a897,898
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
689a900,909
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
690a911,916
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
696a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
775a1004,1005
>                          
>         
776a1007,1017
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
777a1019,1024
> 
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
804a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
825a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
954a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
990a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
1015a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
1028a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
1030a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
1038a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
1062c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1081a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1094a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1113a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2024-12-08

------args------
dataset = ['TTbar']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
177a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
194a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
226a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
227a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
229a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
231a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
244a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
246a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
248a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
251a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
254a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
569,570c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
582a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
620a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
621a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
622a759,766
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
623a768,788
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
> 
>          
>             
>             
>         '''
634a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
644a836
>         if self.useDeepAK8:
647,649c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
651,652c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
657c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
662,663c854,857
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
> 
664a859,863
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
667,671c866
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             del FatJet_pt_argsort, SortedFatJets
672a868,878
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
> 
>             
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
674d879
<         del FatJet_pt_argsort, SortedFatJets
676,679c881
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             
682,686c884,890
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
687a892,895
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
688a897,898
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
689a900,909
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
690a911,916
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
696a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
775a1004,1005
>                          
>         
776a1007,1017
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
777a1019,1024
> 
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
804a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
825a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
954a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
990a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
1015a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
1028a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
1030a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
1038a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
1062c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1081a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1094a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1113a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2024-12-08

------args------
dataset = ['JetHT']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
177a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
194a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
226a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
227a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
229a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
231a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
244a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
246a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
248a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
251a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
254a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
569,570c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
582a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
620a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
621a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
622a759,766
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
623a768,788
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
> 
>          
>             
>             
>         '''
634a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
644a836
>         if self.useDeepAK8:
647,649c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
651,652c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
657c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
662,663c854,857
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
> 
664a859,863
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
667,671c866
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             del FatJet_pt_argsort, SortedFatJets
672a868,878
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
> 
>             
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
674d879
<         del FatJet_pt_argsort, SortedFatJets
676,679c881
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             
682,686c884,890
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
687a892,895
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
688a897,898
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
689a900,909
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
690a911,916
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
696a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
775a1004,1005
>                          
>         
776a1007,1017
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
777a1019,1024
> 
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
804a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
825a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
954a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
990a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
1015a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
1028a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
1030a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
1038a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
1062c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1081a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1094a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1113a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-01-09

------args------
dataset = ['RSGluon']
iov = 2016
signals = False
era = []
pt = []
mass = ['2000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
177a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
194a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
226a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
227a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
229a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
231a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
244a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
246a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
248a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
251a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
254a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
569,570c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
582a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
620a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
621a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
622a759,766
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
623a768,788
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
> 
>          
>             
>             
>         '''
634a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
644a836
>         if self.useDeepAK8:
647,649c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
651,652c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
657c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
662,663c854,857
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
> 
664a859,863
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
667,671c866
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             del FatJet_pt_argsort, SortedFatJets
672a868,878
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
> 
>             
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
674d879
<         del FatJet_pt_argsort, SortedFatJets
676,679c881
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             
682,686c884,890
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
687a892,895
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
688a897,898
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
689a900,909
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
690a911,916
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
696a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
775a1004,1005
>                          
>         
776a1007,1017
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
777a1019,1024
> 
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
804a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
825a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
954a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
990a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
1015a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
1028a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
1030a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
1038a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
1062c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1081a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1094a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1113a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-24

------args------
dataset = ['TTbar']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-24

------args------
dataset = ['TTbar']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-24

------args------
dataset = ['JetHT']
iov = 2017
signals = False
era = ['C']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-24

------args------
dataset = ['TTbar']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-24

------args------
dataset = ['TTbar']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-24

------args------
dataset = ['TTbar']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-24

------args------
dataset = ['TTbar']
iov = 2016
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['JetHT']
iov = 2016
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['TTbar']
iov = 2016APV
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['JetHT']
iov = 2016APV
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['JetHT']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(60, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['JetHT']
iov = 2016
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['JetHT']
iov = 2016
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['JetHT']
iov = 2016APV
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['TTbar']
iov = 2016APV
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['TTbar']
iov = 2016
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016APV
signals = False
era = []
pt = []
mass = ['5000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016APV
signals = False
era = []
pt = []
mass = ['5000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016APV
signals = False
era = []
pt = []
mass = ['6000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016APV
signals = False
era = []
pt = []
mass = ['7000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016
signals = False
era = []
pt = []
mass = ['5000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016
signals = False
era = []
pt = []
mass = ['6000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016APV
signals = False
era = []
pt = []
mass = ['8000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016APV
signals = False
era = []
pt = []
mass = ['9000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016
signals = False
era = []
pt = []
mass = ['7000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016
signals = False
era = []
pt = []
mass = ['8000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2016
signals = False
era = []
pt = []
mass = ['9000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['JetHT']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']

2025-02-25

------args------
dataset = ['TTbar']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2017
signals = False
era = []
pt = []
mass = ['5000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2017
signals = False
era = []
pt = []
mass = ['6000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2017
signals = False
era = []
pt = []
mass = ['7000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['TTbar']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2017
signals = False
era = []
pt = []
mass = ['8000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['ZPrime1']
iov = 2017
signals = False
era = []
pt = []
mass = ['9000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['TTbar']
iov = 2017
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-25

------args------
dataset = ['TTbar']
iov = 2018
signals = False
era = []
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = True
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2018
signals = False
era = []
pt = []
mass = ['5000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2018
signals = False
era = []
pt = []
mass = ['6000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2018
signals = False
era = []
pt = []
mass = ['6000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2018
signals = False
era = []
pt = []
mass = ['5000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2018
signals = False
era = []
pt = []
mass = ['7000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2018
signals = False
era = []
pt = []
mass = ['8000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2018
signals = False
era = []
pt = []
mass = ['9000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2018
signals = False
era = []
pt = []
mass = ['5000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2018
signals = False
era = []
pt = []
mass = ['5000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2017
signals = False
era = []
pt = []
mass = ['9000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2017
signals = False
era = []
pt = []
mass = ['9000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-26

------args------
dataset = ['ZPrime1']
iov = 2017
signals = False
era = []
pt = []
mass = ['9000']
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3', 'prefiring']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,490
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
371a492,519
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
>         
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
505,506c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
518a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
556a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
557a747,757
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
558a759,783
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
> 
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
559a785,788
>          
>             
>             
>         '''
570a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
580a836
>         if self.useDeepAK8:
583,585c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
587,588c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
593c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
598,599c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
603,607c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
612,615c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
618,622c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
626a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
632a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
671a964
>         # print('\n----subjets----')
672a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
699a1004
>                          
700a1006,1018
>         
>         # b tagger #
>         
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
701a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
713a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
716a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
721a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
742a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
871a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
907a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
932a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
945a1445,1452
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
947a1455,1478
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             '''
955a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
979c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
998a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1011a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['D']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
371a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
458,459c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
---
> 
506,507c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
519a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
557a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
558a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
559a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
560a785,788
>          
>             
>             
>         '''
569,570d796
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
573a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
583a836
>         if self.useDeepAK8:
586,588c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
590,591c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
596c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
601,602c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
606,610c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
613c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
615,618c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
621,625c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
629a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
635a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
649,650d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
661,666c948
< 
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
681a964
>         # print('\n----subjets----')
682a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
709a1004,1008
>                          
>         
>         
>         # b tagger #
>         
710a1010,1017
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
711a1019,1024
> 
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
723a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
726a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
731a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
752a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
881a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
917a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
942a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
955a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
956a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
957a1478
>             '''
965a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
989c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1008a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1021a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1040a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['C']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
370a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
371a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
458,459c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
---
> 
506,507c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
519a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
557a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
558a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
559a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
560a785,788
>          
>             
>             
>         '''
569,570d796
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
573a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
583a836
>         if self.useDeepAK8:
586,588c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
590,591c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
596c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
601,602c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
606,610c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
613c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
615,618c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
621,625c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
629a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
635a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
649,650d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
661,666c948
< 
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
681a964
>         # print('\n----subjets----')
682a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
709a1004,1008
>                          
>         
>         
>         # b tagger #
>         
710a1010,1017
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
711a1019,1024
> 
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
723a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
726a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
731a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
752a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
881a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
917a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
942a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
955a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
956a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
957a1478
>             '''
965a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
989c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1008a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1021a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1040a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['C']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,672c948
< 
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
687a964
>         # print('\n----subjets----')
688a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
715a1004,1007
>                          
>         
>         
>         # b tagger #
716a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
717a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
729a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
732a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
737a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
758a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
887a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
923a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
948a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
961a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
962a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
963a1478
>             '''
971a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
995c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1014a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1027a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1046a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['C']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,672c948
< 
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
687a964
>         # print('\n----subjets----')
688a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
715a1004,1007
>                          
>         
>         
>         # b tagger #
716a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
717a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
729a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
732a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
737a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
758a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
887a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
923a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
948a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
961a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
962a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
963a1478
>             '''
971a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
995c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1014a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1027a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1046a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['C']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,672c948
< 
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
687a964
>         # print('\n----subjets----')
688a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
715a1004,1007
>                          
>         
>         
>         # b tagger #
716a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
717a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
729a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
732a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
737a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
758a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
887a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
923a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
948a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
961a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
962a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
963a1478
>             '''
971a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
995c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1014a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1027a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1046a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,672c948
< 
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
687a964
>         # print('\n----subjets----')
688a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
715a1004,1007
>                          
>         
>         
>         # b tagger #
716a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
717a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
729a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
732a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
737a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
758a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
887a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
923a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
948a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
961a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
962a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
963a1478
>             '''
971a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
995c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1014a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1027a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1046a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['C']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,856
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
608a859,863
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610,614d864
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
615a866
>             del FatJet_pt_argsort, SortedFatJets
617c868,871
<         del FatJet_pt_argsort, SortedFatJets
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
619,622c873,881
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
> 
> 
>             
625,629c884,890
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
630a892,895
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
631a897,898
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
632a900,913
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
633a915,916
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,674c948
< 
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
683c957
<         print ("ttbarmass" , ttbarmass) 
---
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,856
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
608a859,863
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610,614d864
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
615a866
>             del FatJet_pt_argsort, SortedFatJets
617c868,871
<         del FatJet_pt_argsort, SortedFatJets
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
619,622c873,881
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
> 
> 
>             
625,629c884,890
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
630a892,895
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
631a897,898
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
632a900,913
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
633a915,916
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,672c948
< 
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
681c957
<         print ("ttbarmass" , ttbarmass) 
---
>         
687a964
>         # print('\n----subjets----')
688a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
715a1004,1007
>                          
>         
>         
>         # b tagger #
716a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
717a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
729a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
732a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
737a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
758a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
887a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
923a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
948a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
961a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
962a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
963a1478
>             '''
971a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
995c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1014a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1027a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1046a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,856
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
608a859,863
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
610,614d864
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
615a866
>             del FatJet_pt_argsort, SortedFatJets
617c868,871
<         del FatJet_pt_argsort, SortedFatJets
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
619,622c873,881
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
> 
> 
>             
625,629c884,890
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
630a892,895
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
631a897,898
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
632a900,913
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
633a915,916
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,674c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
< 
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
683c957
<         print ("ttbarmass" , ttbarmass) 
---
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,655d937
< 
<         ttbarmass = ((jet0.p4 + jet1.p4).mass > 3000)
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass)
666,675c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         ttbarmass[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
683c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,656d937
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         ttbarmass_cut = ((jet0.p4 + jet1.p4).mass > 3000)
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
667,676c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         ttbarmass[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
684c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
690a964
>         # print('\n----subjets----')
691a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
718a1004,1007
>                          
>         
>         
>         # b tagger #
719a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
720a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
732a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
735a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
740a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
761a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
890a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
926a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
951a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
964a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
965a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
966a1478
>             '''
974a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
998c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1017a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1049a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['D']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,656d937
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         ttbarmass_cut = ((jet0.p4 + jet1.p4).mass > 3000)
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
667,676c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         ttbarmass[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
684c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
690a964
>         # print('\n----subjets----')
691a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
718a1004,1007
>                          
>         
>         
>         # b tagger #
719a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
720a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
732a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
735a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
740a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
761a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
890a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
926a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
951a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
964a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
965a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
966a1478
>             '''
974a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
998c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1017a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1049a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['F']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,656d937
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         ttbarmass_cut = ((jet0.p4 + jet1.p4).mass > 3000)
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
667,676c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         ttbarmass[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
684c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
690a964
>         # print('\n----subjets----')
691a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
718a1004,1007
>                          
>         
>         
>         # b tagger #
719a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
720a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
732a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
735a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
740a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
761a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
890a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
926a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
951a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
964a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
965a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
966a1478
>             '''
974a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
998c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1017a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1049a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['A']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,656d937
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         ttbarmass_cut = ((jet0.p4 + jet1.p4).mass > 3000)
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
667,676c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         ttbarmass[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
684c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
690a964
>         # print('\n----subjets----')
691a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
718a1004,1007
>                          
>         
>         
>         # b tagger #
719a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
720a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
732a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
735a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
740a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
761a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
890a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
926a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
951a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
964a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
965a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
966a1478
>             '''
974a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
998c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1017a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1049a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,656d937
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         #ttbarmass_cut = ((jet0.p4 + jet1.p4).mass > 3000)
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
667,676c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         #ttbarmass[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
684c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
690a964
>         # print('\n----subjets----')
691a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
718a1004,1007
>                          
>         
>         
>         # b tagger #
719a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
720a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
732a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
735a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
740a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
761a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
890a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
926a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
951a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
964a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
965a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
966a1478
>             '''
974a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
998c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1017a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1049a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,656d937
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         #ttbarmass_cut = ((jet0.p4 + jet1.p4).mass > 3000)
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
667,676c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         #ttbarmass[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
684c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
690a964
>         # print('\n----subjets----')
691a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
718a1004,1007
>                          
>         
>         
>         # b tagger #
719a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
720a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
732a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
735a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
740a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
761a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
890a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
926a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
951a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
964a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
965a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
966a1478
>             '''
974a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
998c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1017a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1030a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1049a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,655d937
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
666,674c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
682c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
688a964
>         # print('\n----subjets----')
689a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
716a1004,1007
>                          
>         
>         
>         # b tagger #
717a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
718a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
730a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
733a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
738a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
759a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
888a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
924a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
949a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
962a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
963a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
964a1478
>             '''
972a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
996c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1015a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1028a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1047a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,673c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
680d954
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
682c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
688a964
>         # print('\n----subjets----')
689a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
716a1004,1007
>                          
>         
>         
>         # b tagger #
717a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
718a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
730a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
733a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
738a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
759a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
888a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
924a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
949a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
962a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
963a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
964a1478
>             '''
972a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
996c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1015a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1028a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1047a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['C']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,673c948
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
680d954
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
682c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
688a964
>         # print('\n----subjets----')
689a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
716a1004,1007
>                          
>         
>         
>         # b tagger #
717a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
718a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
730a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
733a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
738a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
759a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
888a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
924a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
949a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
962a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
963a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
964a1478
>             '''
972a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
996c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1015a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1028a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1047a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,654d937
< 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0)
665,673c948
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         
680d954
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
682c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
688a964
>         # print('\n----subjets----')
689a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
716a1004,1007
>                          
>         
>         
>         # b tagger #
717a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
718a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
730a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
733a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
738a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
759a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
888a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
924a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
949a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
962a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
963a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
964a1478
>             '''
972a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
996c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1015a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1028a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1047a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,675c938,948
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         ttbarmass = ((jet0.p4 + jet1.p4).mass > 3000) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
683c956,957
<         #print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,675c938,948
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         ttbarmass_cut = ((jet0.p4 + jet1.p4).mass > 3000) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
683c956,957
<         #print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,675c938,948
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         ttbarmass_cut = ((jet0.p4 + jet1.p4).mass > 3000) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
683c956,957
<         #print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,675c938,948
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
<         ttbarmass_cut = (np.abs((jet0.p4 + jet1.p4).mass) > 3000.0) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
683c956,957
<         #print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,674c938,948
< 
<         ttbarmass_cut = (np.abs((jet0.p4 + jet1.p4).mass) > 3000.0) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
682c956,957
<         #print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
688a964
>         # print('\n----subjets----')
689a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
716a1004,1007
>                          
>         
>         
>         # b tagger #
717a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
718a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
730a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
733a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
738a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
759a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
888a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
924a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
949a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
962a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
963a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
964a1478
>             '''
972a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
996c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1015a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1028a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1047a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,674c938,948
< 
<         ttbarmass_cut = (np.abs((jet0.p4 + jet1.p4).mass) > 3000.0) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 & ttbarmass_cut)
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
682c956,957
<         #print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
688a964
>         # print('\n----subjets----')
689a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
716a1004,1007
>                          
>         
>         
>         # b tagger #
717a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
718a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
730a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
733a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
738a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
759a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
888a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
924a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
949a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
962a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
963a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
964a1478
>             '''
972a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
996c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1015a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1028a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1047a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,675c938,948
< 
<         #ttbarmass_cut = (np.abs((jet0.p4 + jet1.p4).mass) > 3000.0) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 )
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
683c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['B']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,674c938,948
< 
<         #ttbarmass_cut = (np.abs((jet0.p4 + jet1.p4).mass) > 3000.0) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 )
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
681d954
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
683c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['D']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,674c938,948
< 
<         #ttbarmass_cut = (np.abs((jet0.p4 + jet1.p4).mass) > 3000.0) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 )
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
681d954
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
683c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )

2025-02-27

------args------
dataset = ['JetHT']
iov = 2018
signals = False
era = ['C']
pt = []
mass = []
blind = False
bkgest = None
toptagger = deepak8
redirector = root://cmsxrootd.fnal.gov/
ttagWP = medium
btagger = deepcsv
ht = 1400
noSyst = False
dask = False
env = lpc
test = False
nocluster = False
----------------

categories = {0: 'atcen', 1: 'atfwd', 2: '2tcen', 3: '2tfwd'}


systematics = ['nominal', 'jes', 'jer', 'pileup', 'pdf', 'q2', 'ttag_pt1', 'ttag_pt2', 'ttag_pt3']
54a55
> # logging
176a178,191
>         btagcuts = {
>             'loose':{
>                 '2016APV': 0.2027, 
>                 '2016':    0.1918,
>                 '2017':    0.1355,
>                 '2018':    0.1208,
>             },
>             'medium':{
>                 '2016APV': 0.6001, 
>                 '2016':    0.5847,
>                 '2017':    0.4506,
>                 '2018':    0.4506,
>             } 
>         }
193a209,212
>         if self.useDeepCSV:
>             self.bdisc = btagcuts['medium'][self.iov]
>         else:
>             self.bdisc = 0.8484
224c243
<         ttbarmass2D_axis = hist.axis.Regular(92, 800, 10000, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
---
>         ttbarmass2D_axis = hist.axis.Regular(60, 800, 6800, name="ttbarmass", label=r"$m_{t\bar{t}}$ [GeV]")
225a245,247
>         jetpt_axis       = hist.axis.Regular(40, 400, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetpt_all_axis       = hist.axis.Regular(50, 0, 2000, name="jetpt", label=r"Jet $p_{T}$ [GeV]")
>         jetp_axis        = hist.axis.Regular(100, 400, 3600, name="jetp", label=r"Jet $p$ [GeV]")
226a249,253
>         jeteta_axis      = hist.axis.Regular(50, -2.4, 2.4, name="jeteta", label=r"Jet $\eta$")
>         jety_axis      = hist.axis.Regular(50, -3, 3, name="jety", label=r"Jet $y$")
>         jetdy_axis      = hist.axis.Regular(50, -3, 3, name="jetdy", label=r"$\Delta y$")
>         jetphi_axis      = hist.axis.Regular(50, -np.pi, np.pi, name="jetphi", label=r"Jet $\phi$")
>         deltaphi_axis      = hist.axis.Regular(50, 0, 5, name="deltaphi", label=r"$\Delta \phi$")
228a256,257
>         btag_axis        = hist.axis.Regular(10, 0, 1, name="bdisc", label=r"DeepCSV")
>         ttag_axis        = hist.axis.Regular(20, 0, 1, name="tdisc", label=r"DeepAK8")
230a260
>         met_axis        = hist.axis.Regular(30,0,200, name="met", label=r"met [GeV]")
243a274,285
>             'jetpt'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
>             'jetpt_nocut'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'jeteta_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jety_nocut'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'jetphi_nocut'  : hist.Hist(jetphi_axis, storage="weight", name="Counts"),
>             'deltaPhi'  : hist.Hist(deltaphi_axis, storage="weight", name="Counts"),
>             'jeteta'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
>             'met' :  hist.Hist(syst_axis, cats_axis, met_axis, storage="weight", name="Counts"),
245a288,292
>             'jeteta1'  : hist.Hist(syst_axis, cats_axis, jeteta_axis, storage="weight", name="Counts"),
>             'jety1'  : hist.Hist(syst_axis, cats_axis, jety_axis, storage="weight", name="Counts"),
>             'jetdy1'  : hist.Hist(syst_axis, cats_axis, jetdy_axis, storage="weight", name="Counts"),
>             'jetphi1'  : hist.Hist(syst_axis, cats_axis, jetphi_axis, storage="weight", name="Counts"),
>             'jetp1'  : hist.Hist(syst_axis, cats_axis, jetp_axis, storage="weight", name="Counts"),
247a295
>             'jetpt1'  : hist.Hist(syst_axis, cats_axis, jetpt_axis, storage="weight", name="Counts"),
250a299,310
> 
> #             'discriminators'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           btag_axis,
> #                                           ttag_axis,
> #                                           nsub_axis,
> #                                           storage="weight", name="Counts"),
> #             'deepak8'  : hist.Hist(cats_axis,
> #                                           jetp_axis,
> #                                           ttbarmass_axis,
> #                                           ttag_axis,
> #                                           storage="weight", name="Counts"),
253a314,338
>             # 'mtt_vs_mt_vs_tdisc' : hist.Hist(syst_axis, cats_axis, jetmass2D_axis, ttbarmass2D_axis, ttag_axis, storage="weight", name="Counts"),
>             
>             'mt_pt_tdisc_jet0' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
>             'mt_pt_tdisc_jet1' : hist.Hist(syst_axis, cats_axis, jetmsd_axis, jetpt_axis, ttag_axis, storage="weight", name="Counts"),
> 
> 
> 
>             
>             # 'deepak8_over_jetp': hist.Hist(cats_axis, ttag_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'tau32_over_jetp': hist.Hist(cats_axis, nsub_axis, jetp_axis, storage="weight", name="Counts"),
>             # 'bdisc_over_jetpt': hist.Hist(cats_axis, btag_axis, jetp_axis, storage="weight", name="Counts"),
>             
>             
>             # checking cuts #
>             
>             'FatJet_mass_before_cuts': hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_mass_after_cuts' : hist.Hist(jetmass2D_axis, storage="weight", name="Counts"),
>             'FatJet_pt_before_cuts'  : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_pt_after_cuts'   : hist.Hist(jetpt_all_axis, storage="weight", name="Counts"),
>             'FatJet_eta_before_cuts' : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'FatJet_eta_after_cuts'  : hist.Hist(jeteta_axis, storage="weight", name="Counts"),
>             'ht_before_cuts'         : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'ht_after_cuts'          : hist.Hist(ht_axis, storage="weight", name="Counts"),
>             'njet_before_cuts'       : hist.Hist(njet_axis, storage="weight", name="Counts"),
>             'njet_after_cuts'        : hist.Hist(njet_axis, storage="weight", name="Counts"),
304a390,397
>      #   if isData:
>      #       
>      #       return processor.accumulate([
>      #           self.process_analysis(events, 'nominal', nEvents),
>      #           self.process_analysis(events, 'hemVeto', nEvents)
>      #       ]) 
>         
>         
308,310d400
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
373a464,493
>             
>         
>             
> #         if ('hem' in self.systematics) and ('2018' in self.iov):
>             
> #             if 'hemVeto' in self.systematics:
>                 
>             
> #                 corrections.extend([
> #                     ({"Jet": corrected_jets, "FatJet": corrected_fatjets}, "hemVeto"),
> #                     ])
> 
>             
> #             corrected_jets_hem    = HEMCleaning(corrected_jets)
> #             corrected_fatjets_hem = HEMCleaning(corrected_fatjets)
> 
> #             corrections.extend([
> #             ({"Jet": corrected_jets_hem, "FatJet": corrected_fatjets_hem}, "hem"),
> #             ])
>             
> #             corrections.extend([
> #             ({"Jet": Jets, "FatJet": FatJets}, "hem"),
> #             ])
> 
>                 
> 
>         
>         
> #         # get nominal output
> #         output_total = self.process_analysis(update(events, corrections[0][0]), 'nominal', nEvents)
374a495,519
> # #         logger.debug('output:%s:nominal:%s:%s', time.time(), output_total['cutflow'], output_total['systematics'])
> # #         logger.debug('output:%s:nominal:%s', time.time(), output_total['weights'])
>         
> #         # loop through corrections
> #         outputs = {}
> #         for collections, name in corrections[1:]:
> #             process_output = self.process_analysis(update(events, collections), name, nEvents)
> #             outputs[name] = process_output
>             
> # #             logger.debug('output:%s:%s:%s', time.time(), name, process_output['weights'])
> 
> 
> #         # combine outputs
> #         for name, output_correction in outputs.items():
> #             for key in output_total.keys():
> 
> #                 if 'hist' in str(type(output_total[key])):
> #                     if 'systematic' in list(output_total[key].axes.name):
> #                         output_total[key] += output_correction[key]
> 
> #                 elif 'accumulator' in str(type(output_total[key])):
> #                     if key != 'cutflow':
> #                         output_total[key][name] = process_output[key][name]
> 
> 
461,463c606
<         run_numbers = events.run
<         luminosity_blocks = events.luminosityBlock
<         event_numbers = events.event
---
> 
510,511c653,675
< 
< 
---
>         
>         if isNominal:
>             output['FatJet_mass_before_cuts'].fill(
>                                        jetmass = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].mass[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].pt[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))].eta[:,0],
>                                        weight = evtweights[(ak.num(FatJets) >= 2) & (ak.any((FatJets.jetId > 1), axis=1))],
>                                   ) 
>             output['ht_before_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   ) 
>         
523a688,689
>         # met cut #Â 
>         selection.add('metcut' , Met.pt < 60)
561a728,745
>         ''' 
>         if isNominal:
>             output['jetpt_nocut'].fill(
>                                      jetpt = jetpt_nocut,
>                                       )
>             output['jeteta_nocut'].fill(
>                                      jeteta = jeteta_nocut,
>                                       )
>             output['jety_nocut'].fill(
>                                      jeteta = jety_nocut,
>                                       )
>             output['jetphi_nocut'].fill(
>                                      jetphi = jety_nocut,
>                                       )
> 
>             
>        '''     
>        # before and after cut plots #
562a747,766
>         '''
>         if isNominal:
>                        
>             output['ht_before_cuts'].fill(
>                                        ht = jetht,
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['ht_after_cuts'].fill(
>                                        ht = jetht[selection.all('htCut')],
>                                        weight = np.ones_like(evtweights[selection.all('htCut')]),
>                                   )
> 
>             output['FatJet_pt_before_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
>             output['FatJet_eta_before_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut','twoFatJets','jetid')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut','twoFatJets','jetid')]),
>                                   )
563a768,783
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].pt[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')].eta[:,0],
>                                        weight = np.ones_like(evtweights[selection.all('htCut', 'twoFatJets','jetid', 'jetkincut')]),
>                                   )
>             output['njet_before_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = np.ones_like(evtweights),
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets[selection.all('twoFatJets', 'jetid')], axis=1),
>                                        weight = np.ones_like(evtweights[selection.all('twoFatJets', 'jetid')]),
>                                   ) 
564a785,788
>          
>             
>             
>         '''
573,575c797
<         run_numbers =run_numbers[eventCut]
<         luminosity_blocks =luminosity_blocks[eventCut]
<         event_numbers = event_numbers[eventCut]
---
>         
577a800,825
>         
> 
>         if isNominal:
>             output['FatJet_mass_after_cuts'].fill(
>                                        jetmass = FatJets.mass[:,0],
>                                        weight = evtweights,
>                                   )
>             output['FatJet_pt_after_cuts'].fill(
>                                        jetpt = FatJets.pt[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['FatJet_eta_after_cuts'].fill(
>                                        jeteta = FatJets.eta[:,0],
>                                        weight = evtweights,
>                                   ) 
>             output['ht_after_cuts'].fill(
>                                        ht = ak.sum(Jets[(Jets.pt>30) & (np.abs(Jets.eta)<3.0)].pt, axis=1),
>                                        weight = evtweights,
>                                   )
>             output['njet_after_cuts'].fill(
>                                        njet = ak.num(FatJets, axis=1),
>                                        weight = evtweights,
>                                   )            
>         
>         
>         
587a836
>         if self.useDeepAK8:
590,592c839,841
<         # sort jets by pt to select two leading jets
<         FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
<         SortedFatJets = FatJets[FatJet_pt_argsort]
---
>             # sort jets by pt to select two leading jets
>             FatJet_pt_argsort = ak.argsort(FatJets.pt, ascending=False) 
>             SortedFatJets = FatJets[FatJet_pt_argsort]
594,595c843,844
<         # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
<         jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             # higher deepak8 discriminator will be used for jet in mt of mt vs mtt distribution
>             jet0 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
600c849
<         jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
---
>             jet1 = ak.where(SortedFatJets[:,0].deepTagMD_TvsQCD > SortedFatJets[:,1].deepTagMD_TvsQCD,
605,606c854,855
<         mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
<         mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
---
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
610,614c859,863
<         logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
<         logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
<         logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
<         logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
---
>             logger.debug('SortedFatJets:%s:FatJets.pt:%s:%s', time.time(), FatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.pt:%s:%s', time.time(), SortedFatJets.pt, correction)
>             logger.debug('SortedFatJets:%s:SortedFatJets.deepTagMD_TvsQCD:%s:%s', time.time(), SortedFatJets.deepTagMD_TvsQCD, correction)
>             logger.debug('SortedFatJets:%s:jet0.pt:%s:%s', time.time(), jet0.pt, correction)
>             logger.debug('SortedFatJets:%s:jet1.pt:%s:%s', time.time(), jet1.pt, correction)
617c866
<         del FatJet_pt_argsort, SortedFatJets
---
>             del FatJet_pt_argsort, SortedFatJets
619,622c868,871
<         # signal = pass region for 2DAlphabet
<         # both jets pass deepak8 tagger
<         ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
<         ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
---
>             # signal = pass region for 2DAlphabet
>             # both jets pass deepak8 tagger
>             ttag_s0 = (jet0.deepTagMD_TvsQCD > self.deepAK8disc)
>             ttag_s1 = (jet1.deepTagMD_TvsQCD > self.deepAK8disc) & (mcut_s1)
625,629c874,878
<         # antitag = fail region for 2DAlphabet
<         # leading (in deepak8 disc) jet passes deepak8 tagger
<         # subleading (in deepak8 disc) jet fails deepak8 tagger         
<         antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
<         antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
---
>             # antitag = fail region for 2DAlphabet
>             # leading (in deepak8 disc) jet passes deepak8 tagger
>             # subleading (in deepak8 disc) jet fails deepak8 tagger         
>             antitag_disc = ((jet1.deepTagMD_TvsQCD < self.deepAK8disc) & (jet1.deepTagMD_TvsQCD > self.deepAK8low))
>             antitag = (antitag_disc) & (ttag_s0) & (mcut_s1)
633a883,916
>             
>         # ----------- CMS Top Tagger Version 2 (SD and Tau32 Cuts) ----------- #
>         else:
>             
>             # ---- ttbar candidates ---- #
>         
>             # index = [[0], [1], [0], ... [0], [1], [1]] type='{# events} * var * int64'
>             index = ak.unflatten( np.random.RandomState(2494497847).randint(2, size=len(FatJets)), np.ones(len(FatJets), dtype='i'))
> 
>             leading_jet = FatJets[index]
>             subleading_jet = FatJets[1 - index]
>             ttbarcands = ak.cartesian([leading_jet, subleading_jet])
>             del index
> 
>             jet0 = ttbarcands.slot0
>             jet1 = ttbarcands.slot1
>             
>         
>     
>             tau32_s0 = np.where(jet0.tau2>0,jet0.tau3/jet0.tau2, 0 )
>             tau32_s1 = np.where(jet1.tau2>0,jet1.tau3/jet1.tau2, 0 )
> 
>             taucut_s0 = (tau32_s0 < self.tau32Cut)
>             taucut_s1 = (tau32_s1 < self.tau32Cut)
> 
>             mcut_s0 = ((self.minMSD < jet0.msoftdrop) & (jet0.msoftdrop < self.maxMSD) )
>             mcut_s1 = ((self.minMSD < jet1.msoftdrop) & (jet1.msoftdrop < self.maxMSD) )
> 
>             ttag_s0 = ((taucut_s0) & (mcut_s0))
>             ttag_s1 = ((taucut_s1) & (mcut_s1))
>             antitag = ((~taucut_s0) & (mcut_s0)) # The Probe jet will always be jet1 (at)
> 
> 
>         
639a923,924
>         if isNominal:
>             output['deltaPhi'].fill(deltaphi = np.abs(jet0.p4.delta_phi(jet1.p4)))
653,674c938,948
< 
<         #ttbarmass_cut = (np.abs((jet0.p4 + jet1.p4).mass) > 3000.0) 
<         signal_region_cuts = (dPhiCut & GoodSubjets & ttag_s0 & ttag_s1 & mcut_s0 )
<         antitag = antitag[signal_region_cuts]
<         ttag_s0 = ttag_s0[signal_region_cuts]
<         ttag_s1 = ttag_s1[signal_region_cuts]
<         jet0 = jet0[signal_region_cuts]
<         jet1 = jet1[signal_region_cuts]
<         FatJets = FatJets[signal_region_cuts]
<         Jets = Jets[signal_region_cuts]
<         SubJets = SubJets[signal_region_cuts]
<         events = events[signal_region_cuts]
<         evtweights = evtweights[signal_region_cuts]
<         #jet0 = jet0[signal_region_cuts]
<         #jet1 = jet1[signal_region_cuts]
<         run_numbers =run_numbers[signal_region_cuts]
<         luminosity_blocks =luminosity_blocks[signal_region_cuts]
<         event_numbers = event_numbers[signal_region_cuts]
<         print("Run Numbers:", run_numbers)
<         print("Event Numbers:", event_numbers)
<         print("Luminosity Blocks:", luminosity_blocks)
< 
---
>         antitag = antitag[ttbarcandCuts]
>         ttag_s0 = ttag_s0[ttbarcandCuts]
>         ttag_s1 = ttag_s1[ttbarcandCuts]
>         jet0 = jet0[ttbarcandCuts]
>         jet1 = jet1[ttbarcandCuts]
>         FatJets = FatJets[ttbarcandCuts]
>         Jets = Jets[ttbarcandCuts]
>         SubJets = SubJets[ttbarcandCuts]
>         events = events[ttbarcandCuts]
>         evtweights = evtweights[ttbarcandCuts]
>         
681d954
<         ttbarmass = (jet0.p4 + jet1.p4).mass 
683c956,957
<         print ("ttbarmass" , ttbarmass) 
---
>         ttbarmass = (jet0.p4 + jet1.p4).mass
>         
689a964
>         # print('\n----subjets----')
690a966,976
>         # print('SubJet00.pt', SubJet00.pt, events.event[0], correction)
>         # print('SubJet01.pt', SubJet01.pt, events.event[0], correction)
>         # print('SubJet10.pt', SubJet10.pt, events.event[0], correction)
>         # print('SubJet11.pt', SubJet11.pt, events.event[0], correction)
>         # print('SubJet00.btagDeepB', SubJet00.btagDeepB, events.event[0], correction)
>         # print('SubJet01.btagDeepB', SubJet01.btagDeepB, events.event[0], correction)
>         # print('SubJet10.btagDeepB', SubJet10.btagDeepB, events.event[0], correction)
>         # print('SubJet11.btagDeepB', SubJet11.btagDeepB, events.event[0], correction)
>         
>         # print('----subjets----\n')
>     
717a1004,1007
>                          
>         
>         
>         # b tagger #
718a1009,1018
>         
>         if self.useDeepCSV:
>             
>             btag_s0 = ( np.maximum(SubJet00.btagDeepB , SubJet01.btagDeepB) > self.bdisc )
>             btag_s1 = ( np.maximum(SubJet10.btagDeepB , SubJet11.btagDeepB) > self.bdisc )
> 
>         else:
>             btag_s0 =  ( np.maximum(SubJet00.btagCSVV2 , SubJet01.btagCSVV2) > 0.8484 )
>             btag_s1 =  ( np.maximum(SubJet10.btagCSVV2 , SubJet11.btagCSVV2) > 0.8484 )
> 
719a1020,1024
>         # --- Define "B Tag" Regions ---- #
>         btag0 = ((~btag_s0) & (~btag_s1)) #(0b)
>         btag1 = (btag_s0 ^ btag_s1) #(1b)
>         btag2 = (btag_s0 & btag_s1) #(2b)
>         
731a1037
>         #btags = {'0b': btag0, '1b':btag1, '2b':btag2}
734a1041,1046
>             # "AT&Pt": antitag_probe, 
>             #  "pret":pretag, 
>             #  "0t":ttag0, 
>             #  "1t":ttag1, 
>             #  ">=1t":ttagI, 
>             #  ">=0t":Alltags
739a1052
>         #categories = { t[0]+b[0]+y[0] : (t[1]&b[1]&y[1])  for t,b,y in itertools.product( ttags.items(), 
760a1074,1140
>         # if running background estimation
>         if (self.bkgEst) and isNominal and (self.bkgEst == 'mistag'): 
> 
> 
>                         
>             jetmass = jet1.p4.mass
>             jetp = jet1.p4.p
>             jetmsd = jet0.msoftdrop
>                 
>        
> 
>             # for mistag rate weights
>             mistag_rate_df = pd.read_csv(f'data/corrections/backgroundEstimate/mistag_rate_{self.iov}.csv')
>             pbins = mistag_rate_df['jetp bins'].values
>             mistag_weights = np.ones(len(FatJets), dtype=float)
> 
> 
>             # for mass modification
> 
> #             qcdfile = util.load(f'data/corrections/backgroundEstimate/QCD_{self.iov}.coffea')
>             qcd_jetmass_dict = json.load(open(f'data/corrections/backgroundEstimate/QCD_jetmass_{self.iov}.json'))
>             qcd_jetmass_bins = qcd_jetmass_dict['bins']
> 
> 
>             # for transfer function
> 
>             bins_mt  = np.arange(0,500,10)
>             bins_mtt = np.arange(800,8000,360)
> 
> 
>             for ilabel,icat in labels_and_categories.items():
> 
>                 icat = ak.flatten(icat)
>                 
>                 if 'pret' in ilabel:
> 
>                     # get antitag region and signal region labels
>                     # ilabel[-5:] = bcat + ycat (0bcen for example)
>                     label_at = 'at'+ilabel[-5:]
>                     label_2t = '2t'+ilabel[-5:]
> 
> 
>                     # get mistag rate for antitag region
>                     mistag_rate = mistag_rate_df[label_at].values
> 
>                     # get p bin for probe jet p
>                     mistag_pbin = np.digitize(ak.flatten(jetp[icat]), pbins) - 1
> 
>                     # store mistag weights for events in this category
>                     mistag_weights[icat] = mistag_rate[mistag_pbin]
> 
> 
> 
>                     # qcd mass modification #
> 
>                     # get distribution of jet mass in QCD signal ('2t') region
>                     qcd_jetmass_counts = qcd_jetmass_dict[label_2t]
> 
>                     # randomly select jet mass from distribution
>                     ModMass_hist_dist = ss.rv_histogram([qcd_jetmass_counts[:-1], qcd_jetmass_bins])
>                     jet1.p4[icat]["fMass"] = ModMass_hist_dist.rvs(size=len(jet1.p4[icat]))
> 
> 
>             self.weights[correction].add('mistag', mistag_weights)
>             del jetmass, jetp, jetmsd
> 
> 
889a1270,1278
>                 # # apply pass ttag SF to events
>                 # ttagSFNom = np.where(ttag2, nomsf[jet0_ptbins]*nomsf[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(ttag2, upsf[jet0_ptbins]*upsf[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(ttag2, downsf[jet0_ptbins]*downsf[jet1_ptbins],ttagSFDown)
> 
>                 # # apply fail ttag SF to events
>                 # ttagSFNom = np.where(antitag, nomsf[jet0_ptbins]*nomsf_fail[jet1_ptbins],ttagSFNom)
>                 # ttagSFUp = np.where(antitag, upsf[jet0_ptbins]*upsf_fail[jet1_ptbins],ttagSFUp)
>                 # ttagSFDown = np.where(antitag, downsf[jet0_ptbins]*downsf_fail[jet1_ptbins],ttagSFDown)
925a1315,1362
>             if 'btag' in self.systematics:
>                 
>                 btag_wgts_nom = np.ones(len(events))
>                 btag_wgts_up  = np.ones(len(events))
>                 btag_wgts_down = np.ones(len(events))
>                 
>                 btag_wgts_nom_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='central')
>                 
>                 btag_wgts_up_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='up')
>                 
>                 btag_wgts_down_bcats = btagCorrections([btag0, btag1, btag2], 
>                                                       [SubJet00, SubJet01, SubJet10, SubJet11], 
>                                                       isData, 
>                                                       self.bdisc,
>                                                       sysType='down')
>                 
>                 
>                 btag_wgts_nom[ak.flatten(btag0)]  = btag_wgts_nom_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_up[ak.flatten(btag0)]   = btag_wgts_up_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_down[ak.flatten(btag0)] = btag_wgts_down_bcats['0b'][ak.flatten(btag0)]
>                 btag_wgts_nom[ak.flatten(btag1)]  = btag_wgts_nom_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_up[ak.flatten(btag1)]   = btag_wgts_up_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_down[ak.flatten(btag1)] = btag_wgts_down_bcats['1b'][ak.flatten(btag1)]
>                 btag_wgts_nom[ak.flatten(btag2)]  = btag_wgts_nom_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_up[ak.flatten(btag2)]   = btag_wgts_up_bcats['2b'][ak.flatten(btag2)]
>                 btag_wgts_down[ak.flatten(btag2)] = btag_wgts_down_bcats['2b'][ak.flatten(btag2)]
>                 
>                 self.weights[correction].add("btag", 
>                     weight=btag_wgts_nom, 
>                     weightUp=btag_wgts_up, 
>                     weightDown=btag_wgts_down,
>                            )
>                 
>                 del btag_wgts_nom, btag_wgts_up, btag_wgts_down
>                 del btag_wgts_nom_bcats, btag_wgts_up_bcats, btag_wgts_down_bcats
>                 
>                 
>                 
>                 logger.debug('memory:%s: btag systematics %s:%s', time.time(), correction, get_memory_usage())
> 
950a1388,1431
>             ''' 
>             output['jetpt'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['ht'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jeteta'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
>             output['jetdy'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             output['jetphi'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
>             '''
963a1445,1469
>             '''
>             
>             output['jetpt1'].fill(
>                                  systematic=correction,
>                                  anacat = i,
>                                  jetpt = jetpt1[icat],
>                                  weight = self.weights[correction].weight()[icat],
>                                   )
>             
>             
>             output['jeteta1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jeteta = jeteta1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
>             output['jety1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jety = jety1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
> 
> 
964a1471,1476
>             output['jetphi1'].fill(
>                                   systematic=correction,
>                                   anacat = i,
>                                   jetphi = jetphi1[icat],
>                                   weight = self.weights[correction].weight()[icat],
>                                   )
965a1478
>             '''
973a1487,1493
>             # output['mtt_vs_mt_vs_tdisc'].fill(systematic=correction,
>             #                              anacat = i,
>             #                              ttbarmass = ttbarmass[icat],
>             #                              jetmass = jetmsd[icat],
>             #                              tdisc = tdisc_s1[icat],
>             #                              weight = self.weights[correction].weight()[icat],
>             #                             )
997c1517,1544
<             if isNominal:  
---
> 
>                 
>             if isNominal:    
>                 
> #                 output['discriminators'].fill(anacat = i,
> #                                           jetp = jetp[icat],
> #                                           bdisc = bdisc_s1[icat],
> #                                           tdisc = tdisc_s1[icat],
> #                                           nsub = tau32_s1[icat],
> #                                           weight = weights[correction].weight()[icat],
> #                                          )
> 
>                 # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet0.pt,
>                 #                                 jetmass = jet0.msoftdrop,
>                 #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
>                 # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                 #                                 anacat = i,
>                 #                                 jetpt = jet1.pt,
>                 #                                 jetmass = jet1.msoftdrop,
>                 #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                 #                                 weight = weights[correction].weight()[icat],
>                 #                       )
> 
1016a1564,1606
>                     ''' 
>                     output['jetpt'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['jeteta'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
> 
>                     output['ht'].fill(
>                                  systematic=syst,
>                                  anacat = i,
>                                  ht = jetht[icat],
>                                  weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jety'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jety = jety[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
> 
>                     output['jetdy'].fill(
>                                   systematic=syst,
>                                   anacat = i,
>                                   jetdy = rapidity[icat],
>                                   weight = self.weights[correction].weight(syst)[icat],
>                                   )
>                     
>                     output['jetphi'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1029a1620,1651
>                     '''
>                     output['jetpt1'].fill(
>                                          systematic=syst,
>                                          anacat = i,
>                                          jetpt = jetpt1[icat],
>                                          weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     
>                     
>                     output['jeteta1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jeteta = jeteta1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>                     output['jety1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jety = jety1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>         
>         
>                     
>                     output['jetphi1'].fill(
>                                           systematic=syst,
>                                           anacat = i,
>                                           jetphi = jetphi1[icat],
>                                           weight = self.weights[correction].weight(syst)[icat],
>                                           )
>                     '''
1048a1671,1693
>                     # output['mt_pt_tdisc_jet0'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet0.pt,
>                     #                                 jetmass = jet0.msoftdrop,
>                     #                                 tdisc = jet0.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
> 
>                     # output['mt_pt_tdisc_jet1'].fill(systematic=syst,
>                     #                                 anacat = i,
>                     #                                 jetpt = jet1.pt,
>                     #                                 jetmass = jet1.msoftdrop,
>                     #                                 tdisc = jet1.deepTagMD_TvsQCD,
>                     #                                 weight = weights[correction].weight(syst)[icat],
>                     #                   )
>                     
>                     # output['mtt_vs_mt_vs_tdisc'].fill(systematic=syst,
>                     #                      anacat = i,
>                     #                      ttbarmass = ttbarmass[icat],
>                     #                      jetmass = jetmsd[icat],
>                     #                      tdisc = tdisc_s0[icat],
>                     #                      weight = self.weights[correction].weight(syst)[icat],
>                     #                     )
